# The sequence of triangle numbers is generated by adding the natural numbers. So
# the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
# terms would be:
# 
#         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#         1: 1
#         3: 1,3
#         6: 1,2,3,6
#        10: 1,2,5,10
#        15: 1,3,5,15
#        21: 1,3,7,21
#        28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

def triangle(term)
  term * (term+1) / 2
end

def count_factors(num)
  factors = prime_factor(num)
  factors.values.inject(1){|prod, v| prod * (v+1)}
end

def prime_factor(num)
  factors = []
  (2..Math.sqrt(num).to_i).each do |p|
    break if num == 1
    while num%p == 0
      num /= p
      factors << p
    end
  end
  factors << num unless num == 1
  sum(factors)
end

def sum(factors)
  count = {}
  factors.each do |f|
    count[f] ||= 0
    count[f] += 1
  end
  count
end

i = 0
while i += 1
  factors = count_factors(triangle(i))
  (puts triangle(i); exit) if factors > 500
end

# => 76576500
# real    0m2.048s
# user    0m2.037s
# sys     0m0.012s