# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
# all figurate (polygonal) numbers and are generated by the following formulae:
#
# Triangle    P₃(n) = n(n+1)/2   1, 3, 6, 10, 15, ...
# Square      P₄(n) = n²         1, 4, 9, 16, 25, ...
# Pentagonal  P₅(n) = n(3n−1)/2  1, 5, 12, 22, 35, ...
# Hexagonal   P₆(n) = n(2n−1)    1, 6, 15, 28, 45, ...
# Heptagonal  P₇(n) = n(5n−3)/2  1, 7, 18, 34, 55, ...
# Octagonal   P₈(n) = n(3n−2)    1, 8, 21, 40, 65, ...
#
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
# interesting properties.
#
# 1. The set is cyclic, in that the last two digits of each number is the first
#    two digits of the next number (including the last number with the first).
# 2. Each polygonal type: triangle (P₃(127)8128), square (P₄(91)=8281), and
#    pentagonal (P₅(44)=2882), is represented by a different number in the set.
# 3. This is the only set of 4-digit numbers with this property.
#
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which
# each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
# octagonal, is represented by a different number in the set.

require_relative '../core_ext/math'

@polygonal_numbers = []
CYCLE_LENGTH = 6

# calculate all 4-digit polygonal numbers for s = 3..8
[*0...CYCLE_LENGTH].each do |s|
  @polygonal_numbers[s] = []
  1.upto(Float::INFINITY) do |n|
    break if (psn = Math.nth_polygonal(s + 3, n)) > 9999
    # split into digits to make comparisons easier
    @polygonal_numbers[s] << psn.digits if psn > 999
  end
end

# compare the end of `this` to the beginning of `that`
def match?(this, that)
  this[-2] == that[0] && this[-1] == that[1]
end

def build_chain(chain)
  if chain.length == CYCLE_LENGTH
    if match?(chain.last.last, chain.first.last)
      puts chain.map(&:last).map{|digits| digits.join.to_i}.inject(&:+)
      exit
    end
  else
    @polygonal_numbers.each.with_index do |polygonals, s|
      next if chain.map(&:first).include?(s)
      polygonals.each do |polygonal|
        if match?(chain.last.last, polygonal)
          build_chain(chain + [[s, polygonal]])
        end
      end
    end
  end
end

@polygonal_numbers[0].each do |triangle|
  build_chain( [[0, triangle]] )
end

# => 28684
# real  0m0.112s
# user  0m0.100s
# sys   0m0.008s
