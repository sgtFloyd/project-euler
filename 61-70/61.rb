# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
# all figurate (polygonal) numbers and are generated by the following formulae:
#
# Triangle    P₃(n) = n(n+1)/2   1, 3, 6, 10, 15, ...
# Square      P₄(n) = n²         1, 4, 9, 16, 25, ...
# Pentagonal  P₅(n) = n(3n−1)/2  1, 5, 12, 22, 35, ...
# Hexagonal   P₆(n) = n(2n−1)    1, 6, 15, 28, 45, ...
# Heptagonal  P₇(n) = n(5n−3)/2  1, 7, 18, 34, 55, ...
# Octagonal   P₈(n) = n(3n−2)    1, 8, 21, 40, 65, ...
#
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
# interesting properties.
#
# 1. The set is cyclic, in that the last two digits of each number is the first
#    two digits of the next number (including the last number with the first).
# 2. Each polygonal type: triangle (P₃(127)8128), square (P₄(91)=8281), and
#    pentagonal (P₅(44)=2882), is represented by a different number in the set.
# 3. This is the only set of 4-digit numbers with this property.
#
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which
# each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
# octagonal, is represented by a different number in the set.

require_relative '../core_ext/math'

# Shifted s-3: [0] are triangle numbers, [5] are octagonal
@polygonal_numbers = Hash.new{|hash, key| hash[key] = []}

# Calculate all 4-digit polygonal numbers for s = 3..8
3.upto(8) do |s|
  1.upto(Float::INFINITY) do |n|
    break if (psn = Math.nth_polygonal(s, n)) > 9999
    # split into digits to make comparisons easier
    @polygonal_numbers[s-3] << psn.digits if psn > 999
  end
end
